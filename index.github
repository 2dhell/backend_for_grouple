// Install required packages:
// npm install express ws

const express = require('express');
const http = require('http');
const WebSocket = require('ws');

const app = express();
const server = http.createServer(app);
const wss = new WebSocket.Server({ server });

const users = new Map();

wss.on('connection', (ws) => {
  // Assign a unique user ID
  const userId = generateUserId();
  users.set(userId, ws);

  // Send the user ID to the client
  ws.send(JSON.stringify({ type: 'user-id', userId }));

  // Listen for messages from the client
  ws.on('message', (message) => {
    const data = JSON.parse(message);
    handleWebSocketMessage(userId, data);
  });

  // Handle disconnection
  ws.on('close', () => {
    users.delete(userId);
    broadcastUsers();
  });
});

function handleWebSocketMessage(userId, data) {
  switch (data.type) {
    case 'match':
      // Handle matchmaking logic here (e.g., pairing users)
      const matchedUserId = findMatch(userId);
      
      if (matchedUserId) {
        const usersToConnect = [userId, matchedUserId];
        usersToConnect.forEach((user) => {
          const userSocket = users.get(user);
          if (userSocket) {
            userSocket.send(JSON.stringify({ type: 'match-found', users: usersToConnect }));
          }
        });
        broadcastUsers();
      }
      break;
    // Handle other message types as needed
  }
}

function findMatch(userId) {
  // Basic example: Return a random user as a match
  const availableUsers = Array.from(users.keys()).filter((user) => user !== userId);
  return availableUsers[Math.floor(Math.random() * availableUsers.length)];
}

function broadcastUsers() {
  const userList = Array.from(users.keys());
  wss.clients.forEach((client) => {
    if (client.readyState === WebSocket.OPEN) {
      client.send(JSON.stringify({ type: 'user-list', users: userList }));
    }
  });
}

function generateUserId() {
  return Math.random().toString(36).substring(2, 15);
}

const PORT = process.env.PORT || 3000;

server.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});
